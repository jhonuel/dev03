pipeline {
    agent { label 'docker-agent' }

    environment {
        GITHUB_REPO = "https://github.com/jhonuel/dev03.git" // Asegúrate de que esta URL sea correcta
        GIT_BRANCH = "dev02" // Asegúrate de que este branch exista
        DOCKERHUB_CREDENTIALS = "docker-hub-credentials" // ID de las credenciales de Docker Hub en Jenkins
        DOCKER_IMAGE = "jhonuel/jhonuel/test"
        DOCKER_TAG = "latest"
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Clonando el repositorio...'
                sh 'git --version' // Verificar si git está instalado
                sh 'rm -rf dev03 || true' // Asegurar que no existe un directorio previo
                sh 'git clone ${GITHUB_REPO} -b ${GIT_BRANCH}'
            }
        }

        stage('Build') {
            steps {
                echo 'Compilando el proyecto...'
                sh 'cd dev03 && mvn clean compile'
            }
        }

        stage('Test') {
            steps {
                echo 'Ejecutando pruebas...'
                sh 'cd dev03 && mvn test'
            }
        }

        stage('Docker Build and Push') {
            steps {
                echo 'Construyendo la imagen Docker...'
                script {
                    docker.withRegistry('', "${DOCKERHUB_CREDENTIALS}") {
                        sh 'cd dev03 && docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                        sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Desplegando la aplicación...'
                sh 'docker-compose down -v'
                sh 'docker-compose up -d --build'
            }
        }
    }

    post {
        always {
            node {
                echo 'Pipeline finalizado.'
            }
        }
        success {
            node {
                echo 'Pipeline completado con éxito.'
            }
        }
        failure {
            node {
                echo 'Pipeline fallido.'
            }
        }
    }
}
